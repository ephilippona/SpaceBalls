#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

out vec3 normalVector;    // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec3 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;
uniform mat4 NormalTransform;

// light position
uniform vec3 WorldLightPosition;

out vec3 test;

void main(){

	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ProjectionTransform * ViewTransform * WorldTransform * vec4(vertexPosition_modelspace,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	// Prepare Data for Fragment Shader
	// Should the normal be transformed?
	normalVector = (NormalTransform * vec4(vertexNormal_modelspace,0)).xyz;
	normalVector = normalize(normalVector);
	
	// Eye vector is a vector between the vertex and the camera
	vec3 vertexPositionCameraspace = (MV*vec4(vertexPosition_modelspace,1)).xyz;
	eyeVector = vec3(0, 0, 0) - vertexPositionCameraspace;
	eyeVector = normalize(eyeVector);
	
	// Light vector is a vector between the light position and the vertex position
	vec3 lightPositionCameraspace = (ViewTransform * vec4(WorldLightPosition,1)).xyz;
	lightVector = lightPositionCameraspace - vertexPositionCameraspace;
	
	//*************** Light vector is not normalized in case we need distance for attenuation **********

	//test = lightPositionCameraspace;

}

